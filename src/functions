#!/bin/bash

# set -a # to export functions # unintended side-effects; using export -f instead

export NORM=$(tput sgr0)
export BOLD=$(tput bold)
export RED=$(tput setaf 1)
export GRE=$(tput setaf 2)

function task() {
    task_name=${1:-default}
    [ -z "$VARS" ] && load_vars    
    task_file=$(taskfile $task_name)
    [ -z "$task_file" ] && echo -e "Task ${BOLD}$task_name${NORM} not found" && exit 1
    chmod +x "$task_file"
    echo -e "${NORM}⚡️ Task ${BOLD}$task_name${NORM} started" # Source: $task_file"
    time_before=$(now)
    "$task_file" "${@:2}"
    exit_code=$?
    time_after=$(now)
    time_taken_ms=$((time_after-time_before))
    time_taken_s=$(echo "scale=1;${time_taken_ms}/1000" | bc)
    [[ $time_taken_s == .* ]] && time_taken_s="0$time_taken_s"
    [ $exit_code = 0 ] && icon="✅" || icon="❌"
    echo -e "${NORM}${icon} Task ${BOLD}$task_name${NORM} completed with exit code $exit_code in ${time_taken_ms}ms (${time_taken_s}s)"
    exit $exit_code
}

function load_vars() {
    env_before=$(env)
    export TASK_LIBRARY_ROOT="./node_modules/task-library"
    export TASK_LIBRARY_SRC="$TASK_LIBRARY_ROOT/src"
    export TASK_LIBRARY_LIB="$TASK_LIBRARY_SRC/lib"
    export TASK_LIBRARY_NODE_BIN="$TASK_LIBRARY_SRC/bin"
    export TASK_LIBRARY_TASKS="$TASK_LIBRARY_SRC/tasks"

    source "$TASK_LIBRARY_SRC/before-vars"
    [ -f "$TASK_VARS" ] && source "$TASK_VARS"
    source "$TASK_LIBRARY_SRC/after-vars"

    env_after=$(env)
    export VARS=$(sort <(echo "$env_before" ) <(echo "$env_after") | uniq -u)
    echo
    npx task print-vars
}

function taskfile() {
    task_name="$1"
    [ -z $task_name ] && echo "Task name is required" && exit 1
    task_paths=("$TASKS" "$TASK_LIBRARY_TASKS")
    for task_path in ${task_paths[@]}; do [ -f "$task_path/$task_name" ] && task_file="$task_path/$task_name" && break; done
    echo "$task_file"
}

function warn_unset() {
    [ ! -z ${!1} ] && echo -n "⚠️  $1 is unset"
    [ ! -z "$2" ] && echo -n ". Defaulting to ${BOLD}$2${NORM}"
    echo
}

function package() {
    echo $(cat ./package.json | jq -r ".$1 // empty")
}

function has_dependency() {
    jq ".dependencies | has(\"$1\")" "$PACKAGE"
}

function has_dev_dependency() {
    jq ".devDependencies | has(\"$1\")" "$PACKAGE"
}

function now() { 
    node -p "Date.now()" 
}

function ssm {
    echo $(aws ssm get-parameter --region $AWS_REGION --name "$1" --with-decryption | jq -r '.Parameter.Value')
}

function is_on_npm() {
    npm view > /dev/null 2>&1
    [ "$?" = 0 ] && echo "true" || echo "false"
}

function is_on_ghp() {    
    status_code=$(curl -s -o /dev/null -I -w "%{http_code}" "$GITHUB_PAGES_URL/") # trailing slash is needed
    [[ $status_code = "200" || $status_code = "301" ]]
    [ "$?" = 0 ] && echo "true" || echo "false"
}

function is_on_sls() {
    [ -f "./serverless.yml" ]
    [ "$?" = 0 ] && echo "true" || echo "false"
}

export -f load_vars
export -f taskfile
export -f warn_unset
export -f package 
export -f has_dependency
export -f has_dev_dependency
export -f now
export -f ssm
export -f is_on_npm
export -f is_on_ghp
export -f is_on_sls
